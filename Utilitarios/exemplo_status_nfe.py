#!/usr/bin/env python3
"""
EXEMPLO DE USO DO C√ìDIGO DE VERIFICA√á√ÉO DE STATUS
Demonstra como usar os endpoints para verificar status das NFe.
"""

import sys
from pathlib import Path
from typing import Dict, Any
import requests
import asyncio
import aiohttp
import sqlite3

# Adiciona o diret√≥rio raiz ao path
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.omie_client_async import carregar_configuracoes_client


def verificar_status_nfe_sincronos(auth: Dict[str, str], filtros: Dict[str, Any]) -> Dict[str, Any]:
    """
    Consulta o endpoint de NF-e emitidas e retorna a lista de notas com seus status.
    Vers√£o s√≠ncrona usando requests (baseada no seu c√≥digo).
    """
    payload = {
        **auth,
        "call": "ListarNFesEmitidas", 
        "param": filtros
    }
    
    resp = requests.post("https://app.omie.com.br/api/v1/nfe/", json=payload, timeout=10)
    resp.raise_for_status()
    return resp.json()


def is_cancelada(nota: Dict[str, Any]) -> bool:
    """
    Identifica se a nota est√° com status 'Cancelada' (ou similar).
    Baseada no seu c√≥digo original.
    """
    return nota.get("situacao", "").lower() == "cancelada"


async def verificar_status_nfe_async(auth: Dict[str, str], filtros: Dict[str, Any]) -> Dict[str, Any]:
    """
    Vers√£o ass√≠ncrona usando aiohttp para melhor integra√ß√£o com o pipeline.
    """
    payload = {
        **auth,
        "call": "ListarNFesEmitidas",
        "param": filtros
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.post(
            "https://app.omie.com.br/api/v1/nfe/", 
            json=payload,
            timeout=aiohttp.ClientTimeout(total=10)
        ) as response:
            response.raise_for_status()
            return await response.json()


def processar_notas_com_status(notas: list, salvar_banco: bool = False) -> Dict[str, int]:
    """
    Processa lista de notas e contabiliza por status.
    Opcionalmente salva no banco de dados.
    """
    estatisticas = {
        "canceladas": 0,
        "autorizadas": 0,
        "outras": 0,
        "total": len(notas)
    }
    
    notas_para_salvar = []
    
    for nota in notas:
        if is_cancelada(nota):
            estatisticas["canceladas"] += 1
            status = "CANCELADA"
        elif nota.get("situacao", "").lower() == "autorizada":
            estatisticas["autorizadas"] += 1
            status = "AUTORIZADA"
        else:
            estatisticas["outras"] += 1
            status = nota.get("situacao", "INDEFINIDO").upper()
        
        print(f"Nota {nota.get('chave_nfe', 'N/A')[:20]}... possui status: {status}")
        
        if salvar_banco:
            notas_para_salvar.append({
                'chave_nfe': nota.get('chave_nfe'),
                'status': status,
                'situacao_original': nota.get('situacao')
            })
    
    # Salva no banco se solicitado
    if salvar_banco and notas_para_salvar:
        salvar_status_banco(notas_para_salvar)
    
    return estatisticas


def salvar_status_banco(notas_status: list) -> int:
    """
    Salva status das notas no banco de dados.
    """
    try:
        with sqlite3.connect("omie.db") as conn:
            cursor = conn.cursor()
            
            # Verifica se coluna status existe
            cursor.execute("PRAGMA table_info(notas)")
            colunas = {row[1] for row in cursor.fetchall()}
            
            if 'status' not in colunas:
                print("‚ö†Ô∏è  Coluna 'status' n√£o encontrada. Criando...")
                cursor.execute("ALTER TABLE notas ADD COLUMN status TEXT DEFAULT NULL")
                conn.commit()
                print("‚úÖ Coluna 'status' criada com sucesso")
            
            # Atualiza status das notas
            atualizados = 0
            for nota in notas_status:
                if nota['chave_nfe']:
                    cursor.execute("""
                        UPDATE notas 
                        SET status = ? 
                        WHERE cChaveNFe = ?
                    """, (nota['status'], nota['chave_nfe']))
                    
                    if cursor.rowcount > 0:
                        atualizados += 1
            
            conn.commit()
            print(f"üìä {atualizados} registros atualizados no banco")
            return atualizados
            
    except Exception as e:
        print(f"‚ùå Erro ao salvar no banco: {e}")
        return 0


def exemplo_uso_sincronos():
    """
    Exemplo de uso baseado no seu c√≥digo original.
    """
    print("üîÑ EXEMPLO DE USO - VERS√ÉO S√çNCRONA")
    print("=" * 50)
    
    try:
        # Carrega configura√ß√µes
        config = carregar_configuracoes_client()
        
        auth = {
            "app_key": config["app_key"], 
            "app_secret": config["app_secret"]
        }
        
        filtros = {
            "pagina": 1, 
            "registros_por_pagina": 50, 
            "data_inicial": "01/09/2025", 
            "data_final": "03/09/2025"
        }
        
        print(f"üîç Consultando NFe de {filtros['data_inicial']} a {filtros['data_final']}")
        
        # Chama API
        resultado = verificar_status_nfe_sincronos(auth, filtros)
        
        if "notas" in resultado:
            notas = resultado["notas"]
            print(f"üìä {len(notas)} notas encontradas")
            
            # Processa conforme seu c√≥digo original
            estatisticas = processar_notas_com_status(notas)
            
            print(f"\nüìà ESTAT√çSTICAS:")
            print(f"   ‚Ä¢ Total: {estatisticas['total']}")
            print(f"   ‚Ä¢ Canceladas: {estatisticas['canceladas']}")
            print(f"   ‚Ä¢ Autorizadas: {estatisticas['autorizadas']}")
            print(f"   ‚Ä¢ Outras: {estatisticas['outras']}")
            
        else:
            print("‚ö†Ô∏è  Nenhuma nota encontrada na resposta")
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")


async def exemplo_uso_async():
    """
    Exemplo usando vers√£o ass√≠ncrona otimizada.
    """
    print("\nüöÄ EXEMPLO DE USO - VERS√ÉO ASS√çNCRONA")
    print("=" * 50)
    
    try:
        # Carrega configura√ß√µes
        config = carregar_configuracoes_client()
        
        auth = {
            "app_key": config["app_key"],
            "app_secret": config["app_secret"]
        }
        
        filtros = {
            "pagina": 1,
            "registros_por_pagina": 20,  # Menor para exemplo
            "data_inicial": "01/09/2025",
            "data_final": "03/09/2025"
        }
        
        print(f"üîç Consultando NFe (async) de {filtros['data_inicial']} a {filtros['data_final']}")
        
        # Chama API ass√≠ncrona
        resultado = await verificar_status_nfe_async(auth, filtros)
        
        if "notas" in resultado:
            notas = resultado["notas"]
            print(f"üìä {len(notas)} notas encontradas")
            
            # Processa e salva no banco
            estatisticas = processar_notas_com_status(notas, salvar_banco=True)
            
            print(f"\nüìà ESTAT√çSTICAS (SALVO NO BANCO):")
            print(f"   ‚Ä¢ Total: {estatisticas['total']}")
            print(f"   ‚Ä¢ Canceladas: {estatisticas['canceladas']}")
            print(f"   ‚Ä¢ Autorizadas: {estatisticas['autorizadas']}")
            print(f"   ‚Ä¢ Outras: {estatisticas['outras']}")
            
        else:
            print("‚ö†Ô∏è  Nenhuma nota encontrada na resposta")
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")


def exemplo_integra√ß√£o_sistema():
    """
    Exemplo de como seu c√≥digo se integra com o sistema existente.
    """
    print("\nüîó EXEMPLO DE INTEGRA√á√ÉO COM SISTEMA EXISTENTE")
    print("=" * 60)
    
    try:
        # Importa o sistema de atualiza√ß√£o de status
        from src.status_nfe_updater import StatusNFeUpdater
        
        print("‚úÖ Sistema de atualiza√ß√£o de status importado com sucesso")
        print("üí° Seu c√≥digo original pode ser usado junto com:")
        print("   ‚Ä¢ StatusNFeUpdater para processamento em lotes")
        print("   ‚Ä¢ Pipeline principal (main_old.py)")
        print("   ‚Ä¢ Utilit√°rios standalone")
        
        # Mostra como usar junto
        updater = StatusNFeUpdater()
        
        print(f"\n‚öôÔ∏è  CONFIGURA√á√ïES DO SISTEMA:")
        print(f"   ‚Ä¢ Limite de notas por execu√ß√£o: 500")
        print(f"   ‚Ä¢ Processamento em lotes: 100")
        print(f"   ‚Ä¢ Requisi√ß√µes simult√¢neas: 2")
        print(f"   ‚Ä¢ Base de dados: {updater.db_path}")
        
        print(f"\nüéØ ENDPOINTS UTILIZADOS:")
        print(f"   ‚Ä¢ ListarNFesEmitidas: https://app.omie.com.br/api/v1/nfe/")
        print(f"   ‚Ä¢ ObterNfe: {updater.client.base_url_nf}")
        
        print(f"\nüí° COMO EXECUTAR:")
        print("   1. Standalone: python Utilitarios/executar_status_updater.py")
        print("   2. Pipeline: python main_old.py (inclui atualiza√ß√£o autom√°tica)")
        print("   3. Program√°tico: StatusNFeUpdater().executar_atualizacao_status()")
        
    except ImportError as e:
        print(f"‚ö†Ô∏è  Sistema n√£o encontrado: {e}")
        print("üí° Execute primeiro: Certifique-se que todos os arquivos foram criados")


async def main():
    """Fun√ß√£o principal que executa todos os exemplos."""
    
    print("üîÑ EXEMPLOS DE USO - SISTEMA DE STATUS NFE")
    print("=" * 70)
    print("Baseado no c√≥digo fornecido e integra√ß√£o com o sistema existente")
    print()
    
    # Exemplo 1: Vers√£o s√≠ncrona (seu c√≥digo original)
    exemplo_uso_sincronos()
    
    # Exemplo 2: Vers√£o ass√≠ncrona otimizada
    await exemplo_uso_async()
    
    # Exemplo 3: Integra√ß√£o com sistema
    exemplo_integra√ß√£o_sistema()
    
    print(f"\n{'='*70}")
    print("üéâ EXEMPLOS CONCLU√çDOS COM SUCESSO!")
    print("üí° Agora voc√™ pode usar qualquer uma das abordagens:")
    print("   ‚Ä¢ C√≥digo original (requests s√≠ncrono)")
    print("   ‚Ä¢ Vers√£o ass√≠ncrona otimizada") 
    print("   ‚Ä¢ Sistema completo integrado")
    print(f"{'='*70}")


if __name__ == "__main__":
    print("Executando exemplos de uso do sistema de status...")
    asyncio.run(main())
