#!/usr/bin/env python3
"""
TESTE DO SISTEMA DE ATUALIZA√á√ÉO DE STATUS NFE
Valida a funcionalidade de consulta e atualiza√ß√£o de status das NFe.
"""

import sys
import logging
from pathlib import Path
import sqlite3

# Adiciona o diret√≥rio raiz ao path
sys.path.insert(0, str(Path(__file__).parent.parent))


def verificar_dependencias():
    """Verifica se as depend√™ncias necess√°rias est√£o dispon√≠veis."""
    print("üîç VERIFICANDO DEPEND√äNCIAS...")
    print("=" * 50)
    
    dependencias = [
        ("aiohttp", "Requisi√ß√µes HTTP ass√≠ncronas"),
        ("asyncio", "Processamento ass√≠ncrono (built-in)"),
        ("sqlite3", "Banco de dados (built-in)"),
        ("configparser", "Configura√ß√µes (built-in)"),
    ]
    
    todas_ok = True
    
    for modulo, descricao in dependencias:
        try:
            if modulo == "aiohttp":
                import aiohttp
            elif modulo == "asyncio":
                import asyncio
            elif modulo == "sqlite3":
                import sqlite3
            elif modulo == "configparser":
                import configparser
            
            print(f"   ‚úÖ {modulo:<15} {descricao}")
        except ImportError as e:
            print(f"   ‚ùå {modulo:<15} AUSENTE - {descricao}")
            print(f"      Erro: {e}")
            if modulo == "aiohttp":
                print(f"      üí° Instale com: pip install aiohttp")
                todas_ok = False
    
    return todas_ok


def verificar_estrutura_banco():
    """Verifica se a estrutura do banco suporta status."""
    
    print("\nüîç VERIFICANDO ESTRUTURA DO BANCO...")
    print("=" * 50)
    
    try:
        if not Path("omie.db").exists():
            print("‚ùå Arquivo omie.db n√£o encontrado!")
            print("üí° Execute o pipeline principal primeiro para criar o banco")
            return False
        
        with sqlite3.connect("omie.db") as conn:
            cursor = conn.cursor()
            
            # Verifica se tabela existe
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='notas'")
            if not cursor.fetchone():
                print("‚ùå Tabela 'notas' n√£o encontrada!")
                return False
            
            # Verifica colunas
            cursor.execute("PRAGMA table_info(notas)")
            colunas = {row[1]: row[2] for row in cursor.fetchall()}
            
            print("üìã COLUNAS DA TABELA:")
            campos_essenciais = ['cChaveNFe', 'nIdNF', 'status', 'xml_baixado']
            
            for campo in campos_essenciais:
                if campo in colunas:
                    print(f"   ‚úÖ {campo:<20} {colunas[campo]}")
                else:
                    print(f"   ‚ùå {campo:<20} AUSENTE!")
                    if campo == 'status':
                        print("      üí° Adicionando coluna 'status'...")
                        try:
                            cursor.execute("ALTER TABLE notas ADD COLUMN status TEXT DEFAULT NULL")
                            conn.commit()
                            print("      ‚úÖ Coluna 'status' adicionada com sucesso")
                        except Exception as e:
                            print(f"      ‚ùå Erro ao adicionar coluna: {e}")
                            return False
            
            # Estat√≠sticas
            cursor.execute("SELECT COUNT(*) FROM notas")
            total = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM notas WHERE xml_baixado = 1")
            com_xml = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM notas WHERE status IS NOT NULL AND status != ''")
            com_status = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM notas WHERE status IS NULL OR status = ''")
            sem_status = cursor.fetchone()[0]
            
            print(f"\nüìä ESTAT√çSTICAS:")
            print(f"   ‚Ä¢ Total de registros: {total:,}")
            print(f"   ‚Ä¢ Com XML baixado: {com_xml:,}")
            print(f"   ‚Ä¢ Com status: {com_status:,}")
            print(f"   ‚Ä¢ Sem status: {sem_status:,}")
            
            if sem_status > 0:
                print(f"\nüí° {sem_status:,} registros podem ser atualizados com status")
            else:
                print(f"\n‚úÖ Todos os registros j√° possuem status")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar banco: {e}")
        return False


def testar_configuracao():
    """Testa se as configura√ß√µes est√£o corretas."""
    
    print("\n‚öôÔ∏è  VERIFICANDO CONFIGURA√á√ïES...")
    print("=" * 50)
    
    try:
        config_path = Path("configuracao.ini")
        if not config_path.exists():
            print("‚ùå Arquivo configuracao.ini n√£o encontrado!")
            return False
        
        import configparser
        config = configparser.ConfigParser()
        config.read(config_path, encoding='utf-8')
        
        # Verifica se√ß√£o omie_api
        if not config.has_section('omie_api'):
            print("‚ùå Se√ß√£o [omie_api] n√£o encontrada!")
            return False
        
        # Verifica campos essenciais
        campos_obrigatorios = ['app_key', 'app_secret', 'base_url_nf']
        
        for campo in campos_obrigatorios:
            valor = config.get('omie_api', campo, fallback=None)
            if valor:
                valor_mascarado = valor[:10] + "..." if len(valor) > 10 else valor
                print(f"   ‚úÖ {campo:<15} {valor_mascarado}")
            else:
                print(f"   ‚ùå {campo:<15} AUSENTE!")
                return False
        
        calls_per_second = config.getint('omie_api', 'calls_per_second', fallback=4)
        print(f"   ‚úÖ calls_per_second  {calls_per_second}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar configura√ß√µes: {e}")
        return False


def testar_importacao_modulos():
    """Testa se os m√≥dulos do sistema podem ser importados."""
    
    print("\nüì¶ TESTANDO IMPORTA√á√ÉO DOS M√ìDULOS...")
    print("=" * 50)
    
    modulos = [
        ("src.omie_client_async", "Cliente API Omie"),
        ("src.utils", "Utilit√°rios do sistema"),
        ("src.status_nfe_updater", "Atualizador de status (novo)"),
    ]
    
    todos_ok = True
    
    for modulo, descricao in modulos:
        try:
            __import__(modulo)
            print(f"   ‚úÖ {modulo:<25} {descricao}")
        except ImportError as e:
            print(f"   ‚ùå {modulo:<25} ERRO - {e}")
            if "aiohttp" in str(e):
                print(f"      üí° Instale depend√™ncias: pip install aiohttp")
            todos_ok = False
        except Exception as e:
            print(f"   ‚ö†Ô∏è  {modulo:<25} AVISO - {e}")
    
    return todos_ok


def executar_teste_simples():
    """Executa teste simples da funcionalidade."""
    
    print("\nüß™ TESTE SIMPLES DE FUNCIONALIDADE...")
    print("=" * 50)
    
    try:
        # Testa normaliza√ß√£o de status (fun√ß√£o simples)
        print("üìã Testando normaliza√ß√£o de status:")
        
        testes_status = [
            ("cancelada", "CANCELADA"),
            ("Autorizada", "AUTORIZADA"), 
            ("rejeitada", "REJEITADA"),
            ("processando", "PROCESSANDO"),
            ("status_desconhecido", "STATUS_DESCONHECIDO"),
        ]
        
        def normalizar_status_teste(status_raw: str) -> str:
            """Fun√ß√£o de teste para normaliza√ß√£o."""
            if not status_raw:
                return "INDEFINIDO"
                
            status_lower = status_raw.lower().strip()
            
            mapeamentos = {
                "cancelada": "CANCELADA",
                "autorizada": "AUTORIZADA", 
                "rejeitada": "REJEITADA",
                "processando": "PROCESSANDO",
            }
            
            for palavra_chave, status_norm in mapeamentos.items():
                if palavra_chave in status_lower:
                    return status_norm
                    
            return status_raw.upper()
        
        todos_ok = True
        for entrada, esperado in testes_status:
            resultado = normalizar_status_teste(entrada)
            if resultado == esperado:
                print(f"   ‚úÖ {entrada:<20} -> {resultado}")
            else:
                print(f"   ‚ùå {entrada:<20} -> {resultado} (esperado: {esperado})")
                todos_ok = False
        
        return todos_ok
        
    except Exception as e:
        print(f"‚ùå Erro no teste simples: {e}")
        return False


def main():
    """Fun√ß√£o principal de testes."""
    
    # Configura√ß√£o de logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    
    print("üîÑ SISTEMA DE TESTE - ATUALIZA√á√ÉO DE STATUS NFE")
    print("=" * 60)
    print("Este script testa a funcionalidade de atualiza√ß√£o de status das NFe")
    print()
    
    # Sequ√™ncia de testes
    testes = [
        ("Depend√™ncias", verificar_dependencias),
        ("Estrutura do Banco", verificar_estrutura_banco),
        ("Configura√ß√µes", testar_configuracao),
        ("Importa√ß√£o de M√≥dulos", testar_importacao_modulos),
        ("Funcionalidade Simples", executar_teste_simples),
    ]
    
    resultados = []
    
    for nome_teste, funcao_teste in testes:
        print(f"\n{'='*20} {nome_teste.upper()} {'='*20}")
        try:
            resultado = funcao_teste()
            resultados.append((nome_teste, resultado))
            
            if resultado:
                print(f"‚úÖ {nome_teste}: PASSOU")
            else:
                print(f"‚ùå {nome_teste}: FALHOU")
                
        except Exception as e:
            print(f"‚ùå {nome_teste}: ERRO - {e}")
            resultados.append((nome_teste, False))
    
    # Relat√≥rio final
    print("\n" + "=" * 60)
    print("üìã RELAT√ìRIO FINAL DOS TESTES")
    print("=" * 60)
    
    passou_todos = True
    for nome, resultado in resultados:
        status = "‚úÖ PASSOU" if resultado else "‚ùå FALHOU"
        print(f"   {nome:<25} {status}")
        if not resultado:
            passou_todos = False
    
    print(f"\n{'='*60}")
    
    if passou_todos:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("\nüí° O sistema est√° pronto para uso.")
        print("üí° Para executar a atualiza√ß√£o de status:")
        print("   python Utilitarios/executar_status_updater.py --dry-run")
    else:
        print("‚ö†Ô∏è  ALGUNS TESTES FALHARAM!")
        print("\nüí° Corre√ß√µes necess√°rias:")
        
        for nome, resultado in resultados:
            if not resultado:
                if "Depend√™ncias" in nome:
                    print("   ‚Ä¢ Instale: pip install aiohttp")
                elif "Banco" in nome:
                    print("   ‚Ä¢ Execute o pipeline principal para criar o banco")
                elif "Configura√ß√µes" in nome:
                    print("   ‚Ä¢ Verifique o arquivo configuracao.ini")
                elif "M√≥dulos" in nome:
                    print("   ‚Ä¢ Verifique se todos os arquivos foram criados")
    
    print(f"{'='*60}")


def mostrar_ajuda():
    """Mostra ajuda sobre os testes."""
    print("""
üîÑ SISTEMA DE TESTE - ATUALIZA√á√ÉO DE STATUS NFE
===============================================

DESCRI√á√ÉO:
  Este script testa todas as funcionalidades do sistema de
  atualiza√ß√£o de status das NFe, validando configura√ß√µes,
  depend√™ncias e estrutura b√°sica.

TESTES REALIZADOS:
  ‚úì Depend√™ncias Python necess√°rias
  ‚úì Estrutura do banco de dados
  ‚úì Configura√ß√µes da API Omie  
  ‚úì Importa√ß√£o dos m√≥dulos do sistema
  ‚úì Funcionalidade b√°sica de normaliza√ß√£o

USAGE:
  python teste_status_updater.py [op√ß√µes]

OP√á√ïES:
  --help, -h       Mostra esta ajuda

EXEMPLOS:
  # Execu√ß√£o dos testes
  python teste_status_updater.py

DEPEND√äNCIAS:
  ‚Ä¢ aiohttp           - pip install aiohttp
  ‚Ä¢ Python 3.8+      - Built-in modules

ARQUIVOS VERIFICADOS:
  ‚Ä¢ configuracao.ini                - Configura√ß√µes da API
  ‚Ä¢ omie.db                         - Banco de dados SQLite
  ‚Ä¢ src/status_nfe_updater.py       - M√≥dulo principal
  ‚Ä¢ src/omie_client_async.py        - Cliente API
""")


if __name__ == "__main__":
    if "--help" in sys.argv or "-h" in sys.argv:
        mostrar_ajuda()
        sys.exit(0)
    
    # Executa testes
    main()
