#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
organizador_testes.py

Script para organizar automaticamente todos os arquivos de teste do projeto,
categorizando-os por funcionalidade e renomeando com padr√µes descritivos.

Funcionalidades:
- An√°lise autom√°tica de arquivos de teste
- Categoriza√ß√£o por tipo de funcionalidade
- Renomea√ß√£o com padr√µes descritivos
- Migra√ß√£o para estrutura organizada
- Gera√ß√£o de documenta√ß√£o autom√°tica
- Backup dos arquivos originais

Uso:
    python organizador_testes.py
    python organizador_testes.py --dry-run  # Apenas simula sem executar
    python organizador_testes.py --backup   # Faz backup antes de mover
"""

import argparse
import logging
import re
import shutil
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import ast

# =============================================================================
# Configura√ß√£o de logging
# =============================================================================

def configurar_logging(verbose: bool = False) -> logging.Logger:
    """Configura sistema de logging"""
    level = logging.DEBUG if verbose else logging.INFO
    
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('organizador_testes.log', encoding='utf-8')
        ],
        force=True
    )
    
    return logging.getLogger(__name__)

# =============================================================================
# Estruturas de dados
# =============================================================================

class ArquivoTeste:
    """Representa um arquivo de teste com suas caracter√≠sticas"""
    
    def __init__(self, caminho: Path):
        self.caminho = caminho
        self.nome_original = caminho.name
        self.conteudo = self._ler_conteudo()
        self.categoria = self._determinar_categoria()
        self.funcionalidade = self._extrair_funcionalidade()
        self.tipo_teste = self._determinar_tipo_teste()
        self.novo_nome = self._gerar_novo_nome()
        self.descricao = self._extrair_descricao()
    
    def _ler_conteudo(self) -> str:
        """L√™ o conte√∫do do arquivo"""
        try:
            with open(self.caminho, 'r', encoding='utf-8') as f:
                return f.read()
        except Exception:
            return ""
    
    def _determinar_categoria(self) -> str:
        """Determina a categoria baseada no conte√∫do e nome"""
        nome_lower = self.nome_original.lower()
        conteudo_lower = self.conteudo.lower()
        
        # Padr√µes para XML/Paths
        if any(x in nome_lower for x in ['xml', 'path', 'chave', 'nfe']):
            return "XML_Paths"
        if any(x in conteudo_lower for x in ['gerar_xml_path', 'chave_nfe', 'cchavenfie']):
            return "XML_Paths"
        
        # Padr√µes para Performance
        if any(x in nome_lower for x in ['performance', 'benchmark', 'comparacao', 'otimizado']):
            return "Performance"
        if any(x in conteudo_lower for x in ['time.perf_counter', 'benchmark', 'performance', 'otimizada']):
            return "Performance"
        
        # Padr√µes para Integra√ß√£o
        if any(x in nome_lower for x in ['verificador', 'integration', 'script']):
            return "Integracao"
        if any(x in conteudo_lower for x in ['verificador_xmls', 'integration', 'verificar_arquivo']):
            return "Integracao"
        
        # Padr√µes para Configura√ß√£o
        if any(x in nome_lower for x in ['config', 'main', 'configuracao']):
            return "Configuracao"
        if any(x in conteudo_lower for x in ['configuracao.ini', 'carregar_configuracoes', 'config']):
            return "Configuracao"
        
        # Padr√µes para Valida√ß√£o de Dados
        if any(x in nome_lower for x in ['validacao', 'dados', 'estrutura', 'banco']):
            return "Validacao_Dados"
        if any(x in conteudo_lower for x in ['sqlite3', 'banco', 'estrutura', 'validacao']):
            return "Validacao_Dados"
        
        # Padr√µes para Funcionalidade espec√≠fica
        if any(x in nome_lower for x in ['extrator', 'pipeline', 'funcional']):
            return "Funcionalidade"
        if any(x in conteudo_lower for x in ['extractor', 'pipeline', 'funcional']):
            return "Funcionalidade"
        
        # Default
        return "Funcionalidade"
    
    def _extrair_funcionalidade(self) -> str:
        """Extrai a funcionalidade principal do teste"""
        nome_base = self.nome_original.replace('.py', '').replace('teste_', '').replace('test_', '')
        
        # Mapeamento de funcionalidades conhecidas
        funcionalidades = {
            'xml': 'xml_path',
            'path': 'xml_path', 
            'gerar_xml': 'xml_path',
            'comparativo': 'comparacao',
            'performance': 'performance',
            'benchmark': 'benchmark',
            'verificador': 'verificador',
            'main': 'configuracao_main',
            'config': 'configuracao',
            'banco': 'estrutura_banco',
            'dados': 'validacao_dados',
            'estrutura': 'estrutura',
            'normalizacao': 'normalizacao',
            'chave': 'chave_nfe',
            'nomenclatura': 'nomenclatura',
            'duplicatas': 'duplicatas',
            'consistencia': 'consistencia'
        }
        
        for palavra_chave, funcionalidade in funcionalidades.items():
            if palavra_chave in nome_base.lower():
                return funcionalidade
        
        # Se n√£o encontrou, usa o nome base limpo
        return nome_base.replace('_', '-')
    
    def _determinar_tipo_teste(self) -> str:
        """Determina o tipo de teste"""
        nome_lower = self.nome_original.lower()
        conteudo_lower = self.conteudo.lower()
        
        if any(x in nome_lower for x in ['benchmark', 'performance']):
            return "benchmark"
        if any(x in conteudo_lower for x in ['time.perf_counter', 'benchmark']):
            return "benchmark"
        
        if any(x in nome_lower for x in ['integration', 'verificador']):
            return "integration"
        if any(x in conteudo_lower for x in ['verificador_xmls', 'integration']):
            return "integration"
        
        if any(x in nome_lower for x in ['validation', 'validacao']):
            return "validation"
        if any(x in conteudo_lower for x in ['validation', 'validacao']):
            return "validation"
        
        return "test"
    
    def _gerar_novo_nome(self) -> str:
        """Gera novo nome descritivo"""
        return f"{self.tipo_teste}_{self.funcionalidade}.py"
    
    def _extrair_descricao(self) -> str:
        """Extrai descri√ß√£o do docstring ou coment√°rios"""
        try:
            # Tentar extrair docstring
            tree = ast.parse(self.conteudo)
            if (tree.body and isinstance(tree.body[0], ast.Expr) and 
                isinstance(tree.body[0].value, ast.Constant)):
                docstring = tree.body[0].value.value
                # Primeira linha n√£o vazia
                for linha in docstring.split('\n'):
                    linha = linha.strip()
                    if linha and not linha.startswith('"""'):
                        return linha
        except:
            pass
        
        # Fallback: procurar coment√°rio descritivo
        linhas = self.conteudo.split('\n')[:10]  # Primeiras 10 linhas
        for linha in linhas:
            linha = linha.strip()
            if linha.startswith('#') and len(linha) > 10:
                return linha[1:].strip()
        
        return f"Teste para {self.funcionalidade.replace('_', ' ')}"

# =============================================================================
# Organizador principal
# =============================================================================

class OrganizadorTestes:
    """Organizador principal de arquivos de teste"""
    
    def __init__(self, diretorio_raiz: Path, logger: logging.Logger):
        self.diretorio_raiz = Path(diretorio_raiz)
        self.logger = logger
        self.pasta_destino = self.diretorio_raiz / "Utilitarios" / "05_Testes_Organizados"
        self.arquivos_encontrados: List[ArquivoTeste] = []
        self.movimentacoes: List[Tuple[Path, Path]] = []
        
    def executar_organizacao(self, dry_run: bool = False, fazer_backup: bool = False) -> None:
        """Executa todo o processo de organiza√ß√£o"""
        self.logger.info("üöÄ INICIANDO ORGANIZA√á√ÉO DE TESTES")
        self.logger.info("="*60)
        
        # 1. Localizar arquivos de teste
        self._localizar_arquivos_teste()
        
        # 2. Analisar arquivos
        self._analisar_arquivos()
        
        # 3. Planejar movimenta√ß√µes
        self._planejar_movimentacoes()
        
        # 4. Criar estrutura de pastas
        if not dry_run:
            self._criar_estrutura_pastas()
        
        # 5. Fazer backup se solicitado
        if fazer_backup and not dry_run:
            self._fazer_backup()
        
        # 6. Executar movimenta√ß√µes
        if not dry_run:
            self._executar_movimentacoes()
        else:
            self._mostrar_simulacao()
        
        # 7. Gerar documenta√ß√£o
        if not dry_run:
            self._gerar_documentacao()
        
        # 8. Relat√≥rio final
        self._relatorio_final(dry_run)
    
    def _localizar_arquivos_teste(self) -> None:
        """Localiza todos os arquivos de teste"""
        self.logger.info(" Localizando arquivos de teste...")
        
        # Padr√µes de arquivos de teste
        padroes = [
            "teste_*.py",
            "test_*.py", 
            "*teste*.py",
            "*test*.py"
        ]
        
        arquivos_encontrados = set()
        
        # Buscar na raiz
        for padrao in padroes:
            arquivos_encontrados.update(self.diretorio_raiz.glob(padrao))
        
        # Buscar na pasta de utilit√°rios existente
        pasta_testes_antiga = self.diretorio_raiz / "Utilitarios" / "04_Testes_e_Validacao"
        if pasta_testes_antiga.exists():
            for padrao in padroes:
                arquivos_encontrados.update(pasta_testes_antiga.glob(padrao))
        
        # Buscar em outras subpastas
        for subpasta in ["DEV", "PROD", "src", "Backup"]:
            pasta = self.diretorio_raiz / subpasta
            if pasta.exists():
                for padrao in padroes:
                    arquivos_encontrados.update(pasta.rglob(padrao))
        
        # Filtrar arquivos v√°lidos
        arquivos_validos = []
        for arquivo in arquivos_encontrados:
            if (arquivo.is_file() and 
                arquivo.suffix == '.py' and 
                arquivo.stat().st_size > 0):
                arquivos_validos.append(arquivo)
        
        self.logger.info(f"üìã Encontrados {len(arquivos_validos)} arquivos de teste")
        
        # Criar objetos ArquivoTeste
        for arquivo in arquivos_validos:
            try:
                self.arquivos_encontrados.append(ArquivoTeste(arquivo))
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è  Erro ao processar {arquivo}: {e}")
    
    def _analisar_arquivos(self) -> None:
        """Analisa e categoriza os arquivos"""
        self.logger.info("üß© Analisando e categorizando arquivos...")
        
        categorias = {}
        for arquivo in self.arquivos_encontrados:
            categoria = arquivo.categoria
            if categoria not in categorias:
                categorias[categoria] = []
            categorias[categoria].append(arquivo)
        
        # Log das categorias
        for categoria, arquivos in categorias.items():
            self.logger.info(f"   üìÅ {categoria}: {len(arquivos)} arquivos")
            for arquivo in arquivos:
                self.logger.debug(f"      - {arquivo.nome_original} ‚Üí {arquivo.novo_nome}")
    
    def _planejar_movimentacoes(self) -> None:
        """Planeja as movimenta√ß√µes de arquivos"""
        self.logger.info("üìã Planejando movimenta√ß√µes...")
        
        for arquivo in self.arquivos_encontrados:
            pasta_categoria = self.pasta_destino / arquivo.categoria
            destino = pasta_categoria / arquivo.novo_nome
            
            # Resolver conflitos de nome
            contador = 1
            destino_original = destino
            while destino in [mov[1] for mov in self.movimentacoes]:
                base = destino_original.stem
                extensao = destino_original.suffix
                destino = destino_original.parent / f"{base}_{contador:02d}{extensao}"
                contador += 1
            
            self.movimentacoes.append((arquivo.caminho, destino))
    
    def _criar_estrutura_pastas(self) -> None:
        """Cria a estrutura de pastas necess√°ria"""
        self.logger.info("üèóÔ∏è  Criando estrutura de pastas...")
        
        # Pasta principal
        self.pasta_destino.mkdir(parents=True, exist_ok=True)
        
        # Subpastas por categoria
        categorias = set(arquivo.categoria for arquivo in self.arquivos_encontrados)
        for categoria in categorias:
            pasta_categoria = self.pasta_destino / categoria
            pasta_categoria.mkdir(exist_ok=True)
            self.logger.debug(f"   ‚úÖ Pasta criada: {categoria}")
    
    def _fazer_backup(self) -> None:
        """Faz backup dos arquivos originais"""
        self.logger.info("üíæ Criando backup dos arquivos originais...")
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        pasta_backup = self.diretorio_raiz / f"backup_testes_{timestamp}"
        pasta_backup.mkdir(exist_ok=True)
        
        for origem, _ in self.movimentacoes:
            try:
                # Manter estrutura relativa no backup
                caminho_relativo = origem.relative_to(self.diretorio_raiz)
                destino_backup = pasta_backup / caminho_relativo
                destino_backup.parent.mkdir(parents=True, exist_ok=True)
                
                shutil.copy2(origem, destino_backup)
                self.logger.debug(f"   üíæ Backup: {origem.name}")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è  Erro no backup de {origem}: {e}")
        
        self.logger.info(f"üíæ Backup criado em: {pasta_backup}")
    
    def _executar_movimentacoes(self) -> None:
        """Executa as movimenta√ß√µes planejadas"""
        self.logger.info("üì¶ Executando movimenta√ß√µes...")
        
        sucesso = 0
        erros = 0
        
        for origem, destino in self.movimentacoes:
            try:
                # Copiar arquivo (mant√©m original por seguran√ßa)
                shutil.copy2(origem, destino)
                self.logger.debug(f"   ‚úÖ {origem.name} ‚Üí {destino}")
                sucesso += 1
            except Exception as e:
                self.logger.error(f"   ‚ùå Erro ao mover {origem}: {e}")
                erros += 1
        
        self.logger.info(f"üì¶ Movimenta√ß√µes: {sucesso} sucessos, {erros} erros")
    
    def _mostrar_simulacao(self) -> None:
        """Mostra simula√ß√£o das movimenta√ß√µes"""
        self.logger.info("üé≠ SIMULA√á√ÉO - Movimenta√ß√µes planejadas:")
        
        for origem, destino in self.movimentacoes:
            origem_rel = origem.relative_to(self.diretorio_raiz)
            destino_rel = destino.relative_to(self.diretorio_raiz)
            self.logger.info(f"   üìÑ {origem_rel} ‚Üí {destino_rel}")
    
    def _gerar_documentacao(self) -> None:
        """Gera documenta√ß√£o autom√°tica"""
        self.logger.info("üìö Gerando documenta√ß√£o...")
        
        # README principal
        self._gerar_readme_principal()
        
        # README por categoria
        categorias = set(arquivo.categoria for arquivo in self.arquivos_encontrados)
        for categoria in categorias:
            self._gerar_readme_categoria(categoria)
    
    def _gerar_readme_principal(self) -> None:
        """Gera README principal da pasta de testes"""
        conteudo = f"""# üìÇ TESTES ORGANIZADOS - PROJETO OMIE V3

## üéØ Objetivo
Esta pasta cont√©m todos os testes organizados automaticamente por categoria e funcionalidade.

## üìÖ Organiza√ß√£o
- **Data da organiza√ß√£o:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
- **Total de arquivos organizados:** {len(self.arquivos_encontrados)}
- **Script utilizado:** organizador_testes.py

## üìÅ Estrutura de Categorias

"""
        
        # Estat√≠sticas por categoria
        categorias = {}
        for arquivo in self.arquivos_encontrados:
            categoria = arquivo.categoria
            if categoria not in categorias:
                categorias[categoria] = []
            categorias[categoria].append(arquivo)
        
        # Descri√ß√µes das categorias
        descricoes_categorias = {
            "Performance": "üöÄ Testes focados em medi√ß√£o de performance e benchmarks",
            "XML_Paths": "üìÑ Testes para gera√ß√£o e valida√ß√£o de caminhos XML",
            "Integracao": "üîó Testes de integra√ß√£o entre m√≥dulos",
            "Configuracao": "üîß Testes relacionados a configura√ß√µes do sistema",
            "Validacao_Dados": "‚úÖ Testes de valida√ß√£o e consist√™ncia de dados",
            "Funcionalidade": "‚öôÔ∏è Testes de funcionalidades espec√≠ficas"
        }
        
        for categoria, arquivos in sorted(categorias.items()):
            descricao = descricoes_categorias.get(categoria, "üìã Testes diversos")
            conteudo += f"### {categoria}/\n"
            conteudo += f"{descricao}\n"
            conteudo += f"- **Arquivos:** {len(arquivos)}\n"
            conteudo += f"- **Tipos:** {', '.join(set(arq.tipo_teste for arq in arquivos))}\n\n"
        
        conteudo += """## üè∑Ô∏è Conven√ß√£o de Nomenclatura

### Formato dos Arquivos:
`[tipo]_[funcionalidade].py`

### Tipos de Teste:
- `benchmark_` - Testes de performance
- `test_` - Testes funcionais padr√£o
- `integration_` - Testes de integra√ß√£o
- `validation_` - Testes de valida√ß√£o

## üöÄ Como Executar

### Teste Individual:
```bash
cd Utilitarios/05_Testes_Organizados/[Categoria]
python [nome_do_teste].py
```

### Por Categoria:
```bash
# Implementar runners espec√≠ficos conforme necess√°rio
```

## üìù Manuten√ß√£o

Para reorganizar novamente no futuro:
```bash
python organizador_testes.py --backup
```

---
*Organiza√ß√£o autom√°tica realizada em {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}*
"""
        
        arquivo_readme = self.pasta_destino / "README.md"
        with open(arquivo_readme, 'w', encoding='utf-8') as f:
            f.write(conteudo)
    
    def _gerar_readme_categoria(self, categoria: str) -> None:
        """Gera README espec√≠fico para uma categoria"""
        arquivos_categoria = [arq for arq in self.arquivos_encontrados if arq.categoria == categoria]
        
        # Mapear descri√ß√µes das categorias
        descricoes = {
            "Performance": "Esta pasta cont√©m testes focados em medi√ß√£o de performance, compara√ß√£o de algoritmos e benchmarks de funcionalidades cr√≠ticas do sistema.",
            "XML_Paths": "Testes espec√≠ficos para gera√ß√£o, valida√ß√£o e otimiza√ß√£o de caminhos XML, incluindo compara√ß√µes entre diferentes implementa√ß√µes.",
            "Integracao": "Testes que verificam a integra√ß√£o entre diferentes m√≥dulos e componentes do sistema.",
            "Configuracao": "Testes relacionados ao carregamento, valida√ß√£o e uso de configura√ß√µes do sistema.",
            "Validacao_Dados": "Testes que validam integridade, consist√™ncia e estrutura de dados no banco e arquivos.",
            "Funcionalidade": "Testes de funcionalidades espec√≠ficas e regras de neg√≥cio do sistema."
        }
        
        conteudo = f"""# üìÇ {categoria}

## üìã Descri√ß√£o
{descricoes.get(categoria, 'Testes diversos para esta categoria')}

## üìÑ Arquivos ({len(arquivos_categoria)})

"""
        
        for arquivo in sorted(arquivos_categoria, key=lambda x: x.novo_nome):
            conteudo += f"### {arquivo.novo_nome}\n"
            conteudo += f"**Arquivo original:** `{arquivo.nome_original}`\n\n"
            conteudo += f"**Descri√ß√£o:** {arquivo.descricao}\n\n"
            conteudo += f"**Tipo:** {arquivo.tipo_teste}\n\n"
            conteudo += f"**Funcionalidade:** {arquivo.funcionalidade}\n\n"
            conteudo += "---\n\n"
        
        conteudo += f"""## üöÄ Execu√ß√£o

Para executar todos os testes desta categoria:
```bash
# Individual
python [nome_do_teste].py

# Em lote (implementar conforme necess√°rio)
# python run_all_{categoria.lower()}_tests.py
```

---
*Categoria organizada automaticamente em {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}*
"""
        
        pasta_categoria = self.pasta_destino / categoria
        arquivo_readme = pasta_categoria / "README.md"
        with open(arquivo_readme, 'w', encoding='utf-8') as f:
            f.write(conteudo)
    
    def _relatorio_final(self, dry_run: bool) -> None:
        """Gera relat√≥rio final da organiza√ß√£o"""
        self.logger.info("üìä RELAT√ìRIO FINAL DA ORGANIZA√á√ÉO")
        self.logger.info("="*60)
        
        if dry_run:
            self.logger.info("üé≠ MODO SIMULA√á√ÉO - Nenhuma altera√ß√£o foi feita")
        else:
            self.logger.info("‚úÖ ORGANIZA√á√ÉO CONCLU√çDA COM SUCESSO")
        
        # Estat√≠sticas
        categorias = {}
        tipos = {}
        
        for arquivo in self.arquivos_encontrados:
            # Por categoria
            categoria = arquivo.categoria
            if categoria not in categorias:
                categorias[categoria] = 0
            categorias[categoria] += 1
            
            # Por tipo
            tipo = arquivo.tipo_teste
            if tipo not in tipos:
                tipos[tipo] = 0
            tipos[tipo] += 1
        
        self.logger.info(f"üìã Total de arquivos processados: {len(self.arquivos_encontrados)}")
        self.logger.info(f"üìÅ Categorias criadas: {len(categorias)}")
        
        self.logger.info("\nüìä Distribui√ß√£o por categoria:")
        for categoria, count in sorted(categorias.items()):
            self.logger.info(f"   {categoria}: {count} arquivos")
        
        self.logger.info("\nüè∑Ô∏è  Distribui√ß√£o por tipo:")
        for tipo, count in sorted(tipos.items()):
            self.logger.info(f"   {tipo}: {count} arquivos")
        
        if not dry_run:
            self.logger.info(f"\nüìÇ Pasta destino: {self.pasta_destino}")
            self.logger.info("üìö Documenta√ß√£o gerada automaticamente")
        
        self.logger.info("\n" + "="*60)

# =============================================================================
# Fun√ß√£o principal
# =============================================================================

def main():
    """Fun√ß√£o principal do organizador"""
    parser = argparse.ArgumentParser(
        description="Organizador autom√°tico de arquivos de teste",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos de uso:
  python organizador_testes.py                    # Organiza√ß√£o completa
  python organizador_testes.py --dry-run          # Simula sem executar
  python organizador_testes.py --backup           # Faz backup antes
  python organizador_testes.py --verbose          # Modo verboso
        """
    )
    
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='Simula a organiza√ß√£o sem executar altera√ß√µes'
    )
    
    parser.add_argument(
        '--backup',
        action='store_true',
        help='Faz backup dos arquivos originais antes de mover'
    )
    
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='Modo verboso (mais detalhes no log)'
    )
    
    parser.add_argument(
        '--diretorio',
        type=str,
        default='.',
        help='Diret√≥rio raiz do projeto (padr√£o: diret√≥rio atual)'
    )
    
    args = parser.parse_args()
    
    # Configurar logging
    logger = configurar_logging(args.verbose)
    
    try:
        # Verificar se estamos no diret√≥rio correto
        diretorio_raiz = Path(args.diretorio).absolute()
        
        if not (diretorio_raiz / "main.py").exists() and not (diretorio_raiz / "src").exists():
            logger.warning("‚ö†Ô∏è  N√£o parece ser o diret√≥rio raiz do projeto Omie")
            logger.warning("   Verifique se est√° no diret√≥rio correto")
        
        # Executar organiza√ß√£o
        organizador = OrganizadorTestes(diretorio_raiz, logger)
        organizador.executar_organizacao(
            dry_run=args.dry_run,
            fazer_backup=args.backup
        )
        
        if args.dry_run:
            logger.info("üé≠ Para executar de verdade, rode sem --dry-run")
        else:
            logger.info("‚úÖ Organiza√ß√£o conclu√≠da! Verifique a pasta Utilitarios/05_Testes_Organizados/")
    
    except KeyboardInterrupt:
        logger.warning("‚ùå Execu√ß√£o interrompida pelo usu√°rio")
        sys.exit(130)
    
    except Exception as e:
        logger.exception(f"‚ùå Erro cr√≠tico: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
