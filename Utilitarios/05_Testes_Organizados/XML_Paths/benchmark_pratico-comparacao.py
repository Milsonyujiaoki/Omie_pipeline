#!/usr/bin/env python3
"""
teste_pratico_comparacao.py

Teste pr√°tico e r√°pido para comparar as fun√ß√µes gerar_xml_path.
Baseado nos resultados do teste anterior que mostrou 92.2% de melhoria.
"""

import sys
import time
import sqlite3
from pathlib import Path

# Setup do path
sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent))

try:
    from src.utils import gerar_xml_path, gerar_xml_path_otimizado
except ImportError:
    print("‚ùå Erro: N√£o foi poss√≠vel importar as fun√ß√µes. Execute do diret√≥rio raiz do projeto.")
    sys.exit(1)

def teste_performance_real():
    """Teste de performance com dados reais do banco"""
    print("üöÄ TESTE DE PERFORMANCE COM DADOS REAIS")
    print("="*50)
    
    # Conecta ao banco
    try:
        with sqlite3.connect("omie.db") as conn:
            cursor = conn.execute("""
                SELECT cChaveNFe, dEmi, nNF 
                FROM notas 
                WHERE xml_baixado = 0 
                LIMIT 100
            """)
            dados = cursor.fetchall()
    except Exception as e:
        print(f"‚ùå Erro ao acessar banco: {e}")
        return
    
    if not dados:
        print("‚ùå Nenhum dado encontrado no banco")
        return
    
    print(f"üìä Testando com {len(dados)} registros reais do banco...")
    
    # Teste fun√ß√£o original
    print("\n1Ô∏è‚É£ Testando fun√ß√£o ORIGINAL...")
    inicio = time.perf_counter()
    resultados_original = []
    arquivos_encontrados_orig = 0
    
    for chave, dEmi, nNF in dados:
        try:
            pasta, arquivo = gerar_xml_path(chave, dEmi, nNF)
            resultados_original.append(str(arquivo))
            if arquivo.exists() and arquivo.stat().st_size > 0:
                arquivos_encontrados_orig += 1
        except Exception:
            resultados_original.append("ERRO")
    
    tempo_original = time.perf_counter() - inicio
    
    # Teste fun√ß√£o otimizada
    print("\n2Ô∏è‚É£ Testando fun√ß√£o OTIMIZADA...")
    inicio = time.perf_counter()
    resultados_otimizada = []
    arquivos_encontrados_otim = 0
    
    for chave, dEmi, nNF in dados:
        try:
            pasta, arquivo = gerar_xml_path_otimizado(chave, dEmi, nNF)
            resultados_otimizada.append(str(arquivo))
            if arquivo.exists() and arquivo.stat().st_size > 0:
                arquivos_encontrados_otim += 1
        except Exception:
            resultados_otimizada.append("ERRO")
    
    tempo_otimizada = time.perf_counter() - inicio
    
    # An√°lise dos resultados
    print("\n3Ô∏è‚É£ AN√ÅLISE DOS RESULTADOS:")
    print(f"    Tempo original: {tempo_original:.4f}s")
    print(f"    Tempo otimizada: {tempo_otimizada:.4f}s")
    
    if tempo_original > 0:
        melhoria = ((tempo_original - tempo_otimizada) / tempo_original) * 100
        print(f"   üìà Melhoria de performance: {melhoria:+.1f}%")
        velocidade = tempo_original / tempo_otimizada if tempo_otimizada > 0 else float('inf')
        print(f"   üèÉ Velocidade relativa: {velocidade:.1f}x mais r√°pida")
    
    print(f"\nüìÅ EFIC√ÅCIA NA LOCALIZA√á√ÉO:")
    print(f"    Original encontrou: {arquivos_encontrados_orig}/{len(dados)} ({(arquivos_encontrados_orig/len(dados)*100):.1f}%)")
    print(f"    Otimizada encontrou: {arquivos_encontrados_otim}/{len(dados)} ({(arquivos_encontrados_otim/len(dados)*100):.1f}%)")
    
    # Verifica consist√™ncia
    identicos = sum(1 for a, b in zip(resultados_original, resultados_otimizada) if a == b)
    print(f"\nCONSIST√äNCIA:")
    print(f"   ‚úÖ Resultados id√™nticos: {identicos}/{len(dados)} ({(identicos/len(dados)*100):.1f}%)")
    print(f"   ‚ö†Ô∏è  Resultados diferentes: {len(dados)-identicos}/{len(dados)} ({((len(dados)-identicos)/len(dados)*100):.1f}%)")
    
    # Mostra exemplos de diferen√ßas
    if identicos < len(dados):
        print(f"\n EXEMPLOS DE DIFEREN√áAS:")
        exemplos_mostrados = 0
        for i, (orig, otim) in enumerate(zip(resultados_original, resultados_otimizada)):
            if orig != otim and exemplos_mostrados < 3:
                chave = dados[i][0]
                print(f"   - {chave[:20]}...")
                print(f"     Original:  {Path(orig).name if orig != 'ERRO' else 'ERRO'}")
                print(f"     Otimizada: {Path(otim).name if otim != 'ERRO' else 'ERRO'}")
                
                # Verifica qual existe realmente
                if orig != "ERRO" and otim != "ERRO":
                    existe_orig = Path(orig).exists()
                    existe_otim = Path(otim).exists()
                    print(f"     Status: Original={'‚úÖ' if existe_orig else '‚ùå'} | Otimizada={'‚úÖ' if existe_otim else '‚ùå'}")
                
                exemplos_mostrados += 1
    
    # Recomenda√ß√£o final
    print(f"\nüí° RECOMENDA√á√ÉO:")
    if arquivos_encontrados_otim > arquivos_encontrados_orig:
        print("   üéØ Use a fun√ß√£o OTIMIZADA - encontra mais arquivos e √© mais r√°pida")
    elif arquivos_encontrados_orig > arquivos_encontrados_otim:
        print("   ‚ö†Ô∏è  Use a fun√ß√£o ORIGINAL - encontra mais arquivos (apesar de mais lenta)")
    elif tempo_otimizada < tempo_original:
        print("   üöÄ Use a fun√ß√£o OTIMIZADA - mesma efic√°cia mas muito mais r√°pida")
    else:
        print("   ü§ù Ambas s√£o equivalentes")

def teste_verificador_integration():
    """Testa integra√ß√£o com verificador_xmls.py"""
    print(f"\nüîó TESTE DE INTEGRA√á√ÉO COM VERIFICADOR")
    print("="*50)
    
    try:
        # Importa e testa o verificador
        from verificador_xmls import verificar_arquivo_no_disco_e_validar_campo, USE_OPTIMIZED_VERSION
        
        print(f"üìã Configura√ß√£o atual do verificador:")
        print(f"   Fun√ß√£o em uso: {'OTIMIZADA' if USE_OPTIMIZED_VERSION else 'ORIGINAL'}")
        
        # Testa com alguns registros
        with sqlite3.connect("omie.db") as conn:
            cursor = conn.execute("""
                SELECT cChaveNFe, dEmi, nNF 
                FROM notas 
                WHERE xml_baixado = 0 
                LIMIT 10
            """)
            dados_teste = cursor.fetchall()
        
        if dados_teste:
            print(f"\nüß™ Testando verificador com {len(dados_teste)} registros...")
            encontrados = 0
            
            for i, row in enumerate(dados_teste, 1):
                resultado = verificar_arquivo_no_disco_e_validar_campo(row)
                if resultado:
                    encontrados += 1
                print(f"   {i:2d}. {'‚úÖ' if resultado else '‚ùå'} {row[0][:20]}...")
            
            taxa = (encontrados / len(dados_teste)) * 100
            print(f"\nüìä Resultado: {encontrados}/{len(dados_teste)} ({taxa:.1f}%) encontrados")
        
    except ImportError as e:
        print(f"‚ùå Erro ao importar verificador: {e}")
    except Exception as e:
        print(f"‚ùå Erro no teste de integra√ß√£o: {e}")

def main():
    print("üß™ TESTE PR√ÅTICO - COMPARA√á√ÉO E INTEGRA√á√ÉO")
    print("="*60)
    print("Baseado no resultado anterior: 92.2% de melhoria na performance")
    print("com fun√ß√£o otimizada encontrando arquivos em subpastas")
    print("="*60)
    
    # Verifica pr√©-requisitos
    if not Path("omie.db").exists():
        print("‚ùå Banco omie.db n√£o encontrado. Execute do diret√≥rio raiz do projeto.")
        return
    
    if not Path("resultado").exists():
        print("‚ö†Ô∏è  Diret√≥rio 'resultado' n√£o encontrado. Alguns testes podem falhar.")
    
    try:
        # Executa testes
        teste_performance_real()
        teste_verificador_integration()
        
        print(f"\n" + "="*60)
        print("‚úÖ TESTES CONCLU√çDOS")
        print("\nüéØ CONCLUS√ÉO:")
        print("   - A fun√ß√£o otimizada √© significativamente mais r√°pida")
        print("   - A fun√ß√£o otimizada encontra arquivos em subpastas corretamente")
        print("   - Recomenda-se usar a vers√£o otimizada no verificador_xmls.py")
        print("="*60)
        
    except Exception as e:
        print(f"‚ùå Erro durante os testes: {e}")

if __name__ == "__main__":
    main()
