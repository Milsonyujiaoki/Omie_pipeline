#!/usr/bin/env python3
"""
Script para reorganizar a pasta DEV do projeto Extrator Omie V3.

Este script:
1. Cria estrutura organizada de pastas
2. Move arquivos para categorias apropriadas  
3. Remove redund√¢ncias
4. Gera relat√≥rio da reorganiza√ß√£o
5. Cria √≠ndice de navega√ß√£o

Estrutura final:
‚îú‚îÄ‚îÄ 01_ANALISES/           # An√°lises t√©cnicas e comparativas
‚îú‚îÄ‚îÄ 02_IMPLEMENTACOES/     # Implementa√ß√µes e integra√ß√µes
‚îú‚îÄ‚îÄ 03_OTIMIZACOES/        # Otimiza√ß√µes e melhorias de performance
‚îú‚îÄ‚îÄ 04_RELATORIOS/         # Relat√≥rios e documenta√ß√£o final
‚îú‚îÄ‚îÄ 05_INTEGRACOES/        # Integra√ß√µes com APIs externas
‚îú‚îÄ‚îÄ 06_UTILS_TESTES/       # Utilit√°rios e scripts de teste
‚îú‚îÄ‚îÄ 07_VERSOES_HISTORICAS/ # Vers√µes antigas (PROD/)
‚îî‚îÄ‚îÄ _INDICE_NAVEGACAO.md   # √çndice para navega√ß√£o r√°pida
"""

import os
import shutil
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Tuple

# =============================================================================
# Configura√ß√µes
# =============================================================================

DEV_PATH = Path(__file__).parent
BACKUP_PATH = DEV_PATH / "backup_reorganizacao"

# Mapeamento de arquivos para categorias
ESTRUTURA_ORGANIZACAO = {
    "01_ANALISES": {
        "descricao": "An√°lises t√©cnicas e comparativas do sistema",
        "arquivos": [
            "ANALISE_COMPARATIVA_EXTRATORES.md",
            "ANALISE_MODULOS_RELATORIO.md", 
            "ANALISE_PROBLEMAS_PIPELINE.md",
            "ANALISE_UPLOAD_ONEDRIVE.md",
            "RELATORIO_ANALISE_FUNCOES_MODULOS.md",
            "RELATORIO_INVESTIGACAO_425.md",
            "verificar_compatibilidade.py"
        ]
    },
    "02_IMPLEMENTACOES": {
        "descricao": "Implementa√ß√µes e integra√ß√µes realizadas",
        "arquivos": [
            "ADAPTACAO_MAIN_RESUMO.md",
            "IMPLEMENTACAO_PIPELINE_HIBRIDO_CONCLUIDA.md",
            "INTEGRACAO_ANOMESDIA_RELATORIO.md",
            "INTEGRACAO_MUDANCAS_MAIN.md",
            "COMO_USAR_PIPELINE_ADAPTATIVO.md",
            "README_PIPELINE_ADAPTATIVO.md"
        ]
    },
    "03_OTIMIZACOES": {
        "descricao": "Otimiza√ß√µes e melhorias de performance",
        "arquivos": [
            "OTIMIZACOES_ANALISE_COMPLETA_DB.md",
            "OTIMIZACOES_FASE9.md", 
            "OTIMIZACOES_VERIFICADOR_XMLS.md",
            "RELATORIO_OTIMIZACAO_INDEXACAO.md",
            "CORRECOES_ANALISE_COMPLETA_DB.md",
            "MELHORIAS_ERRO_425.md",
            "TIMEOUT_30_MINUTOS.md"
        ]
    },
    "04_RELATORIOS": {
        "descricao": "Relat√≥rios finais e documenta√ß√£o consolidada",
        "arquivos": [
            "RELATORIO_COMPATIBILIDADE_FINAL.md",
            "RELATORIO_COMPLETO_ORGANIZACAO.md",
            "RELATORIO_DIVISAO_UTILS.md",
            "RELATORIO_LOGS_ESTRUTURADOS_ATUALIZAR_CAMINHOS.md",
            "RELATORIO_ORGANIZACAO_TESTES.md",
            "STATUS_EXECUCAO_PIPELINE.md",
            "relatorio_compatibilidade.txt",
            "relatorio_imports_20250723_012409.txt",
            "relatorio_organizacao_20250723_012229.txt"
        ]
    },
    "05_INTEGRACOES": {
        "descricao": "Integra√ß√µes com APIs externas e servi√ßos",
        "arquivos": [
            "Api_sharepoint/"  # Pasta inteira
        ]
    },
    "06_UTILS_TESTES": {
        "descricao": "Utilit√°rios, scripts de teste e limpeza",
        "arquivos": [
            "LIMPEZA_PROJETO.md",
            "ARQUIVOS_REMOVIDOS.md"
        ]
    },
    "07_VERSOES_HISTORICAS": {
        "descricao": "Vers√µes hist√≥ricas e c√≥digo legado",
        "arquivos": [
            "PROD/"  # Pasta inteira
        ]
    }
}

# =============================================================================
# Fun√ß√µes auxiliares
# =============================================================================

def criar_backup() -> None:
    """Cria backup da estrutura atual antes da reorganiza√ß√£o."""
    print("[BACKUP] Criando backup da estrutura atual...")
    
    if BACKUP_PATH.exists():
        shutil.rmtree(BACKUP_PATH)
    
    BACKUP_PATH.mkdir()
    
    # Copia todos os arquivos e pastas para backup
    for item in DEV_PATH.iterdir():
        if item.name == "backup_reorganizacao" or item.name == "reorganizar_dev.py":
            continue
            
        if item.is_file():
            shutil.copy2(item, BACKUP_PATH / item.name)
        elif item.is_dir():
            shutil.copytree(item, BACKUP_PATH / item.name)
    
    print(f"[BACKUP] Backup criado em: {BACKUP_PATH}")

def criar_estrutura_pastas() -> None:
    """Cria a nova estrutura de pastas organizadas."""
    print("[ESTRUTURA] Criando nova estrutura de pastas...")
    
    for pasta, info in ESTRUTURA_ORGANIZACAO.items():
        pasta_path = DEV_PATH / pasta
        pasta_path.mkdir(exist_ok=True)
        
        # Cria README.md em cada pasta
        readme_path = pasta_path / "README.md"
        readme_content = f"""# {pasta.replace('_', ' ').title()}

{info['descricao']}

## Arquivos nesta categoria:
"""
        for arquivo in info['arquivos']:
            readme_content += f"- `{arquivo}`\n"
        
        readme_content += f"""
---
*Reorganizado automaticamente em {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}*
"""
        
        with open(readme_path, 'w', encoding='utf-8') as f:
            f.write(readme_content)
        
        print(f"[ESTRUTURA] Criada pasta: {pasta}")

def mover_arquivos() -> Tuple[List[str], List[str]]:
    """Move arquivos para as categorias apropriadas."""
    print("[MOVIMENTACAO] Movendo arquivos para categorias...")
    
    movidos = []
    nao_encontrados = []
    
    for pasta, info in ESTRUTURA_ORGANIZACAO.items():
        pasta_destino = DEV_PATH / pasta
        
        for arquivo in info['arquivos']:
            origem = DEV_PATH / arquivo
            
            if origem.exists():
                destino = pasta_destino / arquivo
                
                try:
                    if origem.is_file():
                        shutil.move(str(origem), str(destino))
                    elif origem.is_dir():
                        if destino.exists():
                            shutil.rmtree(destino)
                        shutil.move(str(origem), str(destino))
                    
                    movidos.append(f"{arquivo} -> {pasta}")
                    print(f"[MOVIMENTACAO] {arquivo} -> {pasta}")
                    
                except Exception as e:
                    print(f"[ERRO] Erro ao mover {arquivo}: {e}")
                    nao_encontrados.append(f"{arquivo} (erro: {e})")
            else:
                nao_encontrados.append(arquivo)
                print(f"[AVISO] Arquivo n√£o encontrado: {arquivo}")
    
    return movidos, nao_encontrados

def gerar_indice_navegacao(movidos: List[str], nao_encontrados: List[str]) -> None:
    """Gera √≠ndice de navega√ß√£o da nova estrutura."""
    print("[INDICE] Gerando √≠ndice de navega√ß√£o...")
    
    indice_content = f"""# üìÅ √çndice de Navega√ß√£o - DEV Reorganizado

*Reorganizado automaticamente em {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}*

## üóÇÔ∏è Estrutura Organizacional

"""
    
    for pasta, info in ESTRUTURA_ORGANIZACAO.items():
        pasta_nome = pasta.replace('_', ' ').title()
        indice_content += f"""### üìÇ [{pasta_nome}](./{pasta}/)
**Descri√ß√£o:** {info['descricao']}

**Arquivos:**
"""
        for arquivo in info['arquivos']:
            if arquivo.endswith('/'):
                indice_content += f"- üìÅ `{arquivo[:-1]}/` (pasta)\n"
            else:
                indice_content += f"- üìÑ `{arquivo}`\n"
        
        indice_content += "\n"
    
    # Se√ß√£o de estat√≠sticas
    indice_content += f"""## üìä Estat√≠sticas da Reorganiza√ß√£o

- **Arquivos movidos:** {len(movidos)}
- **Arquivos n√£o encontrados:** {len(nao_encontrados)}
- **Pastas criadas:** {len(ESTRUTURA_ORGANIZACAO)}

### ‚úÖ Arquivos Movidos com Sucesso:
"""
    
    for movimento in movidos:
        indice_content += f"- {movimento}\n"
    
    if nao_encontrados:
        indice_content += f"""
### ‚ö†Ô∏è Arquivos N√£o Encontrados:
"""
        for arquivo in nao_encontrados:
            indice_content += f"- {arquivo}\n"
    
    indice_content += f"""
## üîÑ Recupera√ß√£o

Se precisar desfazer a reorganiza√ß√£o, use o backup criado em:
```
{BACKUP_PATH}
```

## üìù Navega√ß√£o R√°pida

- Para **an√°lises t√©cnicas** ‚Üí [`01_ANALISES/`](./01_ANALISES/)
- Para **implementa√ß√µes** ‚Üí [`02_IMPLEMENTACOES/`](./02_IMPLEMENTACOES/)  
- Para **otimiza√ß√µes** ‚Üí [`03_OTIMIZACOES/`](./03_OTIMIZACOES/)
- Para **relat√≥rios finais** ‚Üí [`04_RELATORIOS/`](./04_RELATORIOS/)
- Para **integra√ß√µes** ‚Üí [`05_INTEGRACOES/`](./05_INTEGRACOES/)
- Para **utils e testes** ‚Üí [`06_UTILS_TESTES/`](./06_UTILS_TESTES/)
- Para **vers√µes antigas** ‚Üí [`07_VERSOES_HISTORICAS/`](./07_VERSOES_HISTORICAS/)

---
*Gerado por: reorganizar_dev.py*
"""
    
    indice_path = DEV_PATH / "_INDICE_NAVEGACAO.md"
    with open(indice_path, 'w', encoding='utf-8') as f:
        f.write(indice_content)
    
    print(f"[INDICE] √çndice criado: {indice_path}")

def gerar_relatorio_final(movidos: List[str], nao_encontrados: List[str]) -> None:
    """Gera relat√≥rio final da reorganiza√ß√£o."""
    print("[RELATORIO] Gerando relat√≥rio final...")
    
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    relatorio_path = DEV_PATH / f"_relatorio_reorganizacao_{timestamp}.log"
    
    relatorio_content = f"""RELAT√ìRIO DE REORGANIZA√á√ÉO - DEV FOLDER
Data: {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}
======================================================

ESTRUTURA CRIADA:
"""
    
    for pasta, info in ESTRUTURA_ORGANIZACAO.items():
        relatorio_content += f"\n{pasta}/\n  Descri√ß√£o: {info['descricao']}\n  Arquivos: {len(info['arquivos'])}\n"
    
    relatorio_content += f"""
ESTAT√çSTICAS:
- Pastas criadas: {len(ESTRUTURA_ORGANIZACAO)}
- Arquivos movidos: {len(movidos)}
- Arquivos n√£o encontrados: {len(nao_encontrados)}
- Backup criado em: {BACKUP_PATH}

MOVIMENTA√á√ïES REALIZADAS:
"""
    
    for movimento in movidos:
        relatorio_content += f"‚úÖ {movimento}\n"
    
    if nao_encontrados:
        relatorio_content += f"\nARQUIVOS N√ÉO ENCONTRADOS:\n"
        for arquivo in nao_encontrados:
            relatorio_content += f"‚ùå {arquivo}\n"
    
    relatorio_content += f"""
CONCLUS√ÉO:
Reorganiza√ß√£o conclu√≠da com sucesso!
Nova estrutura dispon√≠vel com √≠ndice de navega√ß√£o em _INDICE_NAVEGACAO.md

======================================================
"""
    
    with open(relatorio_path, 'w', encoding='utf-8') as f:
        f.write(relatorio_content)
    
    print(f"[RELATORIO] Relat√≥rio salvo: {relatorio_path}")

# =============================================================================
# Fun√ß√£o principal
# =============================================================================

def main():
    """Executa a reorganiza√ß√£o completa da pasta DEV."""
    print("=" * 60)
    print("üîÑ REORGANIZA√á√ÉO AUTOM√ÅTICA DA PASTA DEV")
    print("=" * 60)
    print(f"üìÅ Diret√≥rio: {DEV_PATH}")
    print(f"‚è∞ In√≠cio: {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}")
    print()
    
    try:
        # Etapa 1: Backup
        criar_backup()
        print()
        
        # Etapa 2: Criar estrutura
        criar_estrutura_pastas()
        print()
        
        # Etapa 3: Mover arquivos
        movidos, nao_encontrados = mover_arquivos()
        print()
        
        # Etapa 4: Gerar √≠ndice
        gerar_indice_navegacao(movidos, nao_encontrados)
        print()
        
        # Etapa 5: Relat√≥rio final
        gerar_relatorio_final(movidos, nao_encontrados)
        print()
        
        # Resumo final
        print("=" * 60)
        print("‚úÖ REORGANIZA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print("=" * 60)
        print(f"üìä Estat√≠sticas:")
        print(f"   ‚Ä¢ Pastas criadas: {len(ESTRUTURA_ORGANIZACAO)}")
        print(f"   ‚Ä¢ Arquivos movidos: {len(movidos)}")
        print(f"   ‚Ä¢ Arquivos n√£o encontrados: {len(nao_encontrados)}")
        print()
        print(f"üìñ Navega√ß√£o: _INDICE_NAVEGACAO.md")
        print(f"üíæ Backup: {BACKUP_PATH}")
        print(f"‚è∞ Conclu√≠do: {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}")
        print("=" * 60)
        
    except Exception as e:
        print(f"‚ùå ERRO CR√çTICO: {e}")
        print(f"üíæ Backup dispon√≠vel em: {BACKUP_PATH}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
